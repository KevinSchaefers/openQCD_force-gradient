
Main program qcd1

SYNTAX

qcd1 -i <filename> [-c <filename> [-a [-norng]]|[-mask <int>]]
                   [-rmold] [-noms]


DESCRIPTION

This program generates an ensemble of gauge fields representative of QCD with
a multiplet of Wilson quarks using the HMC algorithm. Exactly which theory is
simulated depends on the parameters passed to the program. Moreover, one has
a choice of boundary conditions in time (open, SF, open-SF and periodic).

In the course of the simulation, the average plaquette <tr{U(p)}> is measured
and the generated gauge field configurations are written to files in specified
directories. Further observables, constructed using the Wilson (gradient)
flow, are optionally measured as well.


COMMAND-LINE OPTIONS

The program has only few options since most of the parameters are passed
through an input file. The options are

-i <filename>    Specifies the name of the input file. The name can be
                 a fully qualified name or be specified relative to the
                 working directory.

-c <filename>    This option instructs the program to read the initial
                 gauge-field configuration from the specified file. The
                 configuration directory must be specified in the input
		 file and the configuration name must be of the form
                 described below. The initial field is chosen randomly
                 if the option is not set.

-a               This option specifies that the run is a continuation of a
                 previous run. The -c <filename> option is required in this
                 case and must point to the last configuration saved by the
                 previous run. All output data are appended to the previous
                 output files.

-norng           Continuation runs normally start from the saved state of
                 the random number generators. This option specifies that
                 the generators should be reinitialized using the level and
                 seed specified in the input parameter file. An error occurs
                 if these values coincide with previously used ones.

                 NOTE: Starting from the saved state is not possible if the
                 process grid sizes NPROC0,..,NPROC3 or the number of OpenMP
		 threads changed.

-mask <int>      In a new run starting from an initial configuration that
                 was generated on a smaller lattice, the integer "mask"
                 passed through this option determines the type of field
                 extension to be applied in directions mu=0,..,3. Namely
                 if mask&(2^mu)=0, the field is periodically extended and
                 otherwise anti-periodically. Periodic extension is applied
                 in all directions if the option is omitted.

-rmold           Remove old gauge fields and keep only the one last saved
                 to disk. In a new run, the initial field specified on
		 the command line is not removed.

-noms            If this option is set, the observables constructed using
                 the Wilson flow are not measured. In continuation runs,
		 the option must be set in either all or none of the runs.


INPUT PARAMETERS

The lattice size and the process grid must be defined in the file global.h
(see README.global). All other parameters are read from the input file and the
command line. An example of a valid input file is qcd1.in in this directory.
The parameter values specified in this file are:

[Run name]
name         Snoopy137             # Run name = configuration base name.

[Log and data directories]
log_dir      ../data/qcd1/log      # Log file directory.
dat_dir      ../data/qcd1/dat      # Data file directory.

[Initial configuration]
type         e                     # Configuration storage type (e=exported,
                                   # b=block-exported, l=local).
cnfg_dir     /data/qcd1/cnfg       # Configuration directory (type e).
block_dir    /data/qcd1/blk        # Configuration directory (type b).
local_dir    /data/qcd1/loc        # Configuration directory (type l).
nio_nodes    4                     # Number of top level subdirectories used
                                   # for block-exported and/or local storage.
nio_streams  4                     # Number of parallel I/O streams (block-
                                   # exported and/or local storage).

[Configurations]
types        eb                    # Configuration storage types (a combination
                                   # of e=exported, b=block-exported, l=local).
cnfg_dir     /data/qcd1/cnfg       # Configuration directory (type e).
block_dir    /data/qcd1/blk        # Configuration directory (type b).
local_dir    /data/qcd1/loc        # Configuration directory (type l).
bs           16 8 8 24             # Block size to be used for block-exported
                                   # configurations.
nio_nodes    8                     # Number of top level subdirectories used
                                   # for block-exported and/or local storage.
nio_streams  4                     # Number of parallel I/O streams (block-
                                   # exported and/or local storage).

[Lattice parameters]
beta         6.0                   # Inverse gauge coupling.
c0           1.6667                # Coefficient of the plaquette term
                                   # in the gauge action.
kappa        0.1300                # List of sea-quark hopping parameters.
isw          0                     # Form of the SW term (0: traditional,
                                   # 1: exponential).
csw          1.234                 # Coefficient of the SW term in the
                                   # Dirac operator.

[Boundary conditions]
type         2                     # Type of boundary condition (0: open,
                                   # 1: SF, 2: open-SF, 3: periodic).
phi          0.12 -0.56            # Boundary values of the gauge field at
                                   # time 0.
phi'         0.92 0.76             # Boundary values of the gauge field at
                                   # time NPROC0*L0.
cG           1.10                  # Gauge action improvement coefficient at
                                   # time 0.
cG'          1.05                  # Gauge action improvement coefficient at
                                   # time NPROC0*L0.
cF           0.95                  # Fermion action improvement coefficient
                                   # at time 0.
cF'          0.90                  # Fermion action improvement coefficient
                                   # at time NPROC0*L0.
theta        0.5 1.0 -0.5          # Angles specifying the phase-periodic bc
                                   # of the quark fields in space.

[Random number generator]
level        0                     # Ranlux level.
seed         73099                 # Ranlux seed.

[HMC parameters]
actions      0 1 2                 # Gauge and pseudo-fermion actions included
                                   # in the simulation.
npf          2                     # Number of pseudo-fermion fields.
mu           0.01 1.0              # List of twisted-mass parameters.
nlv          3                     # Number of levels of the integrator for
                                   # the molecular-dynamics (MD) equations.
tau          0.5                   # MD trajectory length.

[MD trajectories]
nth          320                   # Number of thermalization trajectories.
ntr          32000                 # Total number of trajectories.
dtr_log      4                     # Separation of log entries.
dtr_cnfg     32                    # Separation of configuration saves.
dtr_ms       8                     # Separation of measurements.

Then follow the parameters of the integrator levels, the actions, the MD
forces and the solvers for the Dirac equation. Their format is described in
the file doc/parms.pdf and on top of the modules

flags/mdint_parms.c
flags/action_parms.c
flags/force_parms.c
flags/solver_parms.c

The integrator levels are labeled from 0 (innermost level, usually including
the force deriving from the chosen gauge action) to nlv-1 (outermost level).
Action, force and solver labels must be integers but may otherwise be chosen
arbitrarily. There must be a section for all actions, forces and solvers used,
and for each action section there must be a corresponding force section with
the same label.

Finally, if measurements using the Wilson flow are to be made, the section

[Wilson flow]
integrator   RK3                   # EULER: Euler, RK2: 2nd order Runge-Kutta
                                   # RK3: 3rd order Runge-Kutta.
eps          2.0e-2                # Integration step size.
ntot         100                   # Total number of integration steps.
dnms         10                    # Number of steps between measurements.

is required.

The chosen parameter values must satisfy the following constraints:

- In the case of storage of type "b", the block size bs must divide the
  lattice and the local lattice must divide the block size. Moreover,
  nio_nodes and nio_streams must divide the number nb of blocks.

- In the case of storage of type "l", nio_nodes and nio_streams must divide
  the number NPROC of MPI processes.

- For initial configurations, the values of nio_nodes and nio_streams are
  read from the section "Initial configuration". They must satisfy the
  same constraints as for the produced configurations, but the block sizes
  are read from the configuration files and need not coincide with the ones
  specified in the section "Configurations" (except in continuation runs).

- "nth" and "ntr" must be integer multiples of "dtr_cnfg".

- "nth" must be equal to zero in a continuation run (option -a).

- "dtr_cnfg" must be a multiple of "dtr_log".

- "dtr_cnfg" must be a multiple of "dtr_ms" and the latter must be
  a multiple of "dtr_log".

- The number "ntot" of Wilson flow integration steps must be a multiple
  of "dnms".

Depending on the chosen parameters and options, the values of some parameters
may be ignored. In particular, only the relevant configuration directories
(those corresponding to the chosen configuration storage types) need to be
given. Superfluous sections (such as the section "Wilson flow" if the option
-noms is set) and parameters may be deleted or commented out. If present they
are not read by the program and have no effect on the run.


CONFIGURATION DIRECTORY STRUCTURE

The configuration directory tree is expected to be of the form described in
README.ym1.


FILES

The program stores the results to a number of files with the following file
names:

  <run name>.log       Log file.
  <run name>.par       Parameter file.
  <run name>.dat       Data file.
  <run name>.ms.dat    Measurement data file.
  <run name>.rng       Exported state of the random number generators.

  <run name>.log~      Backup log file.
  <run name>.par~      Backup parameter file.
  <run name>.dat~      Backup data file.
  <run name>.ms.dat~   Backup measurement data file.
  <run name>.rng~      Backup random number generator state file.

  <run name>n3         Configuration file of storage type "e".
  <run name>n3_b8      Configuration file of storage type "b".
  <run name>n3_27      Configuration file of storage type "l".

Here n3 identifies configuration number 3, the suffix _b8 signals that the
file contains the gauge-field variables on block number 8 and the suffix _27
that it is a storage type "l" file written by the MPI process with rank 27.

Configurations are saved after the first "nth" trajectories and then after
every "dtr_cnfg" trajectories. The backup copies *.log~, *.dat~ and *.rng~ of
the *.log, *.dat and *.rng files are created each time a new configuration is
saved to disk.

The parameter file *.par is created when a new run is started. It contains all
relevant lattice and run parameters in binary form. Continuation runs read the
file and check whether the parameter values match those read from the input
file. If a mismatch is discovered, the program is halted and an error message
is printed to the file STARTUP_ERROR in the program directory.


EXAMPLES

The command

  qcd1 -i qcd1.in -c <filename>

starts a new run from the specified configuration file, which is searched for
in the initial directory specified in the input parameter file. The storage
type of the initial configuration must be specified there too as well as the
parameters nio_nodes and nio_streams in the case of storage of type "b" and
"l". Only the initial gauge field is required, the initial momentum and
pseudo-fermion fields being chosen randomly with the proper Gaussian
distributions.

If the -c option is omitted, a completely new run is started instead and the
gauge field variables are set to uniformly distributed random SU(3) matrices.

With the command

  qcd1 -i qcd1.in -c <filename> -a

a continuation run is launched. In this case the *.log, *.par, *.dat and *.rng
files of the previous run must be found in the directories "log_dir" and
"dat_dir", respectively. Using these files, and the configuration name given
on the command line, a number of checks are performed to ensure that the run
is indeed a continuation of the previous one. In particular, all algorithmic
parameters must have the same values.


RUN DATA

The data taken after every "dtr_log" trajectories are collected in a structure

typedef struct
{
   int nt,iac;
   double dH,avpl;
} dat_t;

with elements

nt                 trajectory number,

dH                 MD hamiltonian deficit at the end of the trajectory,

iac                0 or 1 depending on whether the trajectory was accepted
                   or not,

avpl               average plaquette of the current gauge field.

The average plaquette is equal to

   plaq_wsum_dble(1)/npl,

   npl=6*(N0-1)*N1*N2*N3 for open boundary conditions,

      =6*N0*N1*N2*N3     otherwise,

where N0=NPROC0*L0, etc., are the lattice sizes (see uflds/plaq_sum.c). In the
course of the simulation, the collected data are written in binary form to the
*.dat file in a contiguous manner and without any header data at the beginning
of the file. They are also printed to the log file together with the average
solver iteration numbers and some further information.

A simple main program that reads and analyses the run data files is included
in the directory ../devel/nompi/main.


MEASUREMENT DATA

Unless the -noms option is set, the program performs measurements of a set of
observables based on the Wilson flow after every period of "dtr_ms" of MD
trajectories. No measurements are performed in the thermalization phase (i.e.
at trajectory numbers less than "nth").

Each time a measurement is made, the Wilson flow is integrated from flow time
0 to the times

   in*dt,   dt=dnms*eps,   in=0,1,..,ntot/dnms,

in steps of eps using the specified integrator (here ntot, eps and dnms are
the parameters specified in the section "Wilson flow"). The time-slice sums of
the densities of the Wilson plaquette action, the Yang-Mills action and the
topological charge are computed at all these flow times (see uflds/plaq_sum.c,
tcharge/ftensor.c and tcharge/tcharge.c).

At the beginning of the measurement data file the program writes the data
contained in the header structure

static struct
{
   int dn,nn,tmax;
   double eps;
} file_head;

where dn=dnms, nn=ntot/dnms and tmax=NPROC0*L0. After the header data, the
data file contains a sequence of data structures

static struct
{
   int nt;
   double **Wsl,**Ysl,**Qsl;
} data;

labeled by the HMC trajectory number nt, where the measurement was made. In
each case the time-slice sums of the densities of the Wilson plaquette action,
the Yang-Mills action and the topological charge are written to the arrays

  Wsl[in][t]   (in=0,..,nn, t=0,..,tmax-1)
  Ysl[in][t]
  Qsl[in][t]

See the functions write_file_head() and write_data() in the program file
qcd1.c for the exact order in which the data are written to the output files.


BINARY FILE FORMAT

The log files are ASCII files that should be readable on any machine. The
data files, on the other hand, are written in binary format using the fwrite()
function. Integers are written as 4 byte signed integers and floating-point
numbers according to the IEEE-754 standard for double-precision numbers.

Binary data written to disk are converted to little endian byte order if the
machine is big endian. Field configurations and measurement data stored on
disk are thus always in little endian byte order independently of the machine
that is used.


RANDOM NUMBER GENERATOR

Random numbers are generated using the ranlux generator. There is an
independent instance of the generator per OpenMP thread.

The initialization of the generator is as follows:

- In the case of a new run, or if the option -norng is set, the program
  reads the parameters "level" and "seed" from the input file and uses
  these to initialize the generator.

- In a continuation run, and if the MPI process grid NPROC0x..xNPROC3 and
  the number of OpenMP threads is unchanged, the state of the generator
  is set to the one at the end of the previous run.

In a sequence of continuation runs, it is therefore recommended to leave
the process grid and the thread number unchanged and to make no use of the
option -norng.


SAFETY MEASURES AND ERROR REPORTING

A number of safety measures have been implemented:

- It is not possible to overwrite an existing *.log or *.dat file; these
  must first be deleted or renamed by hand if a run is to be repeated.

- Appending a run to a previous run, but not from the last saved
  configuration of that run, is not possible.

- The accessibility of the various directories and the compatibility
  of the selected options is checked at the beginning of the program.

Any attempt to force illegal operations leads to an abnormal termination of
the program, with an informative message being written either to the *.log
file or the file STARTUP_ERROR in the program directory (if the error occurs
before the log file is opened).

On the other hand, the following should be kept in mind:

- Filenames may not be longer than 127 characters. The program
  checks at an early stage whether this is the case or not. Longer
  filenames can be accommodated by setting the macro NAME_SIZE in
  the global.h header file to a larger value.

- Once a run started successfully, the configurations generated
  are saved unconditionally, i.e. any existing field configurations
  with matching filenames are overwritten.


CHECKPOINTS AND EARLY TERMINATION

The program can be stopped gracefully by touching a file in the log directory
with the same name as the log file but with extension .end instead of .log. It
may take a while until the program exits, because it will only do so at the
points where the gauge field configuration is saved to disk.

If the machine crashes, or if the program was stopped in the way described,
the run can always be continued starting from the saved configuration and
output files. However, after a crash, the *.log and *.dat files may be
corrupted, in which case they must first be restored from the backup *.log~
and *.dat~ files.
