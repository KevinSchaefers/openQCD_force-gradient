
Main program cvt1

SYNTAX

cvt1 -i <filename> [-rmold]


DESCRIPTION

This program converts gauge-field configurations from one storage format to
another.


COMMAND-LINE OPTIONS

The program has only few options since most of the parameters are passed
through an input file. The options are

-i <filename>    Specifies the name of the input file. The name can be
                 a fully qualified name or be specified relative to the
                 working directory.

-rmold           Removes the old configuration files and keeps only the
                 configurations in the converted storage format.

The types of I/O programs to be used for the field configurations is specified
in the input parameter file (see README.io for the available types).


INPUT PARAMETERS

The lattice size and the process grid must be defined in the file global.h
(see README.global). All other parameters are read from the input file and the
command line. An example of a valid input file is cvt1.in in this directory.
The parameter values specified in this file are:

[Run name]
name         Snoopy137             # Run name = configuration base name.

[Log directory]
log_dir      ../data/cvt1/log      # Log file directory.

[Boundary conditions]
type         2                     # Type of boundary condition (0: open,
                                   # 1: SF, 2: open-SF, 3: periodic).
phi          0.12 -0.56            # Boundary values of the gauge field at
                                   # time 0.
phi'         0.92 0.76             # Boundary values of the gauge field at
                                   # time NPROC0*L0.

[Input configurations]
type         e                     # Configuration storage type (e=exported,
                                   # b=block-exported, l=local).
cnfg_dir     /data/ym1/cnfg        # Configuration directory (type e).
block_dir    /data/ym1/blk         # Configuration directory (type b).
local_dir    /data/ym1/loc         # Configuration directory (type l).
nio_nodes    8                     # Number of top level subdirectories used
                                   # for block-exported or local storage.
nio_streams  4                     # Number of parallel I/O streams (block-
                                   # exported or local storage).
first        1                     # No of the first configuration to consider.
last         4                     # No of the last configuration.
step         1                     # Configuration separation (last-first must
                                   # be an integer multiple of step).

[Output configurations]
types        b                     # Configuration storage types (e=exported,
                                   # b=block-exported, l=local).
cnfg_dir     /data/ym1/cnfg        # Configuration directory (type e).
block_dir    /data/ym1/blk         # Configuration directory (type b).
local_dir    /data/ym1/loc         # Configuration directory (type l).
bs           16 8 8 24             # Block size to be used for block-exported
                                   # configurations.
nio_nodes    12                    # Number of top level subdirectories used
                                   # for block-exported or local storage.
nio_streams  8                     # Number of parallel I/O streams (block-
                                   # exported or local storage).

The chosen parameter values must satisfy the following constraints:

- In the case of storage of type "b", the block size bs must divide the
  lattice and the local lattice must divide the block size. Moreover,
  nio_nodes and nio_streams must divide the number of blocks.

- In the case of storage of type "l", nio_nodes and nio_streams must divide
  the number NPROC of MPI processes.

In the case of the output configurations several storage types (such as "eb")
may be chosen. Depending on the specified parameters and options, the values
of some parameters are ignored and need not be included in the input parameter
file.


CONFIGURATION DIRECTORY STRUCTURE

The configuration directory tree is expected to be of the form described in
README.ym1.


FILES

The program stores the results to a number of files with the following file
names:

  <name>.log       Log file.
  <name>.log~      Backup log file.

  <name>n3         Configuration file of storage type "e".
  <name>n3_b8      Configuration file of storage type "b".
  <name>n3_27      Configuration file of storage type "l".

Here n3 identifies configuration number 3, the suffix _b8 signals that the
file contains the gauge-field variables on block number 8 and the suffix _27
that it is a storage type "l" file written by the MPI process with rank 27.
The backup copy *.log~ of the log file is recreated each time a configuration
is fully processed.


RANDOM NUMBER GENERATOR STATE

In the case of local storage, the state of the random number generators is
saved to disk along with the gauge field configuration. When such field
configurations are read from disk, the state of the generators is reset to
the stored one.

The conversion program does the following:

l -> e,b:  The state of the generators is read from disk, but the data
           is discarded.

e,b -> l:  The state of the generators is set by calling start_ranlux(0,1)
           [random/ranlux.c] before the state and the gauge field are
	   written to disk.

l   -> l:  The state of the generators is preserved, i.e. the conversion
           is in this case equivalent to a configuration file copy.

In the case of e,b -> l conversions, it is thus up to the user to ensure that
the random number generators are in a sensible state when such configurations
are later used in simulation or measurement programs (using save_ranlux() and
restore_ranlux(), for example).


SAFETY MEASURES AND ERROR REPORTING

A number of safety measures have been implemented:

- It is not possible to overwrite an existing *.log file. The file
  must first be deleted or renamed by hand if a run is to be repeated.

- The accessibility of the various directories and the compatibility
  of the selected options is checked at the beginning of the program.

Any attempt to force illegal operations leads to an abnormal termination of
the program, with an informative message being written either to the *.log
file or the file STARTUP_ERROR in the program directory if the error occurs
before the log file is opened.

On the other hand, the following should be kept in mind:

- Filenames may not be longer than 127 characters. The program
  checks at an early stage whether this is the case or not. Longer
  filenames can be accommodated by setting the macro NAME_SIZE in
  the global.h header file to a larger value.

- Once a run started successfully, the configurations generated
  are saved unconditionally, i.e. any existing field configurations
  with matching filenames are overwritten.


CHECKPOINTS AND EARLY TERMINATION

The program can be stopped gracefully by touching a file in the log directory
with the same name as the log file but with extension .end instead of .log. It
may take a while until the program exits, because it will only do so at the
points where a gauge configuration fully processed.

If the machine crashes, it is safe to assume that the configurations listed in
the backup log file have been correctly converted. Another run may then be
needed to convert the remaining configurations.
