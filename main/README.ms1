
Main program ms1

SYNTAX

ms1 -i <filename> [-a [-norng]]


DESCRIPTION

This program reads gauge field configurations from disk and computes
stochastic estimates of reweighting factors.


COMMAND-LINE OPTIONS

The program has only few options since most of the parameters are passed
through an input file. The options are

-i <filename>    Specifies the name of the input file. The name can be
                 a fully qualified name or be specified relative to the
                 working directory.

-a               This option specifies that the run is a continuation of
                 a previous run. All output data are appended to the
                 previous output files.

-norng           Continuation runs normally start from the saved state of
                 the random number generators. This option specifies that
                 the generators should be reinitialized using the level and
                 seed specified in the input parameter file. An error occurs
                 if these values coincide with previously used ones.

                 NOTE: Starting from the saved state is not possible if the
                 process grid sizes NPROC0,..,NPROC3 or the number of OpenMP
		 threads changed.


INPUT PARAMETERS

The lattice size and the process grid must be defined in the file global.h
(see README.global). All other parameters are read from the input file. An
example of a valid input file is ms1.in in this directory. The parameter
values specified in this file are:

[Run name]
name         Snoopy137             # Run name = configuration base name.

[Log and data directories]
log_dir      ../data/ms1/log       # Log file directory.
dat_dir      ../data/ms1/dat       # Data file directory.

[Configurations]
type         e                     # Configuration storage type (e=exported,
                                   # b=block-exported, l=local).
cnfg_dir     /data/qcd1/cnfg       # Configuration directory (type e).
block_dir    /data/qcd1/blk        # Configuration directory (type b).
local_dir    /data/qcd1/loc        # Configuration directory (type l).
nio_nodes    8                     # Number of top level subdirectories used
                                   # for block-exported or local storage.
nio_streams  4                     # Number of parallel I/O streams (block-
                                   # exported or local storage).
first        1                     # No of the first configuration to consider.
last         4                     # No of the last configuration.
step         1                     # Configuration separation (last-first must
                                   # be an integer multiple of step).
nrw          2                     # Number of reweighting factors to be
                                   # computed in this run.

[Random number generator]
level        0                     # Ranlux level.
seed         73099                 # Ranlux seed.

[Lattice parameters]
kappa        0.1300 0.1290         # List of sea-quark hopping parameters.
isw          0                     # Form of the SW term (0: traditional,
                                   # 1: exponential).
csw          1.234                 # Coefficient of the SW term in the
                                   # Dirac operator.

[Boundary conditions]
type         2                     # Type of boundary condition (0: open,
                                   # 1: SF, 2: open-SF, 3: periodic).
phi          0.12 -0.56            # Boundary values of the gauge field at
                                   # time 0.
phi'         0.92 0.76             # Boundary values of the gauge field at
                                   # time NPROC0*L0.
cF           0.95                  # Fermion action improvement coefficient
                                   # at time 0.
cF'          0.90                  # Fermion action improvement coefficient
                                   # at time NPROC0*L0.
theta        0.5 1.0 -0.5          # Angles specifying the phase-periodic bc
                                   # of the quark fields in space.

Then follows a description of the reweighting factors labeled by an index that
runs from 0 to nrw-1 (see flags/rw_parms.c). The available reweighting factors
and associated parameter sections are described in the file doc/parms.pdf (see
the top of the modules update/rwtm.c, update/rwtmeo.c and update/rwrat.c for
further explanations).

Reweighting factors of type RWRAT require a choice of a rational function. The
solvers to be used need to be specified too (see doc/parms.pdf).

The chosen parameter values must satisfy the following constraints:

- In the case of configuration storage of type "b", the block size bs must
  divide the lattice size and the local lattice must divide the block size.
  Moreover, nio_nodes and nio_streams must divide the number nb of blocks.

- In the case of storage of type "l", nio_nodes and nio_streams must divide
  the number NPROC of MPI processes.

- Continuation runs (option -a) require all algorithmic parameters to be
  the same as in the previous run.

As already mentioned, the indices of the parameter sections describing the
reweighting factors must increase in steps of 1 from 0 to nrw-1. Superfluous
sections and parameters may be deleted or commented out. If present they are
not read by the program and the specified values (if any) have no effect on
the run.


CONFIGURATION DIRECTORY STRUCTURE

The configuration directory tree is expected to be of the form described in
README.ym1.


FILES

The program searches for the field configurations

  <run name>n<int>

in the specified configuration directory (or its subdirectories in the case of
storage of type "b" and "l"), where <int> is the configuration number.

The program writes the results of the computations to the files

  <run name>.ms1.log   Log file
  <run name>.ms1.log~  Backup log file

  <run name>.ms1.dat   Measurement data file
  <run name>.ms1.dat~  Backup data file

  <run name>.ms1.par   Parameter data file
  <run name>.ms1.par~  Backup parameter data file

  <run name>.ms1.rng   Exported state of the random number generators
  <run name>.ms1.rng~  Backup random number generator state file

in the directories log_dir (log file) and dat_dir (data files). The parameter
file is created at the beginning of the run and remains unchanged after that.
The backup copies *.log~, *.dat~ and *.rng~ of the *.log, *.dat and *.rng file
are updated each time a configuration is fully processed.

The log directory log_dir, the data directory dat_dir and the configuration
directory must be accessible from MPI process 0. In the case of storage type
"b" or "l", the configuration directory must be accessible from all MPI
processes that read or write configuration files (see README.io and
README.ym1).


OUTPUT DATA

At the beginning of the data file the program writes the data contained in the
header structure

static struct
{
   int nrw;
   int *nfct,*nsrc;
} file_head;

where nrw is the number of reweighting factors specified in the input file,
nfct[0],..,nfct[nrw-1] the array of the associated numbers of Hasenbusch
factors (set to 1 for RWRAT reweighting factors) and nsrc[0],..,nsrc[nrw-1]
the array of the associated numbers of random source fields.

After the header data, the data file contains a sequence of structures

static struct
{
   int nc;
   qflt ***sqn,***lnr;
} data;

labeled by the field configuration number nc. The quadruple-precision type
qflt is defined in su3.h (see doc/qsum.pdf for further explanations). For each
configuration, the data are

  sqn[irw][ifct][isrc]    Square norm of the source field number isrc
                          generated in the course of the calculation of
                          the factor number ifct of the reweighting factor
                          number irw.

  lnr[irw][ifct][isrc]    Logarithm, -ln(r), of the associated stochastic
                          estimate of the reweighting factor r.

The ranges of the indices are

  irw=0,..,nrw-1;  ifct=0,..,nfct[irw]-1;  isrc=0,..,nsrc[irw]-1.

For the exact order in which the data are written to the output files, see
the functions write_file_head() and write_data() in the program file ms1.c.

From these data, the stochastic estimates W[irw] of the reweighting factor
number irw are obtained by calculating the averages

  w[irw][ifct]=

    (1/nsrc[irw])*sum_{isrc=0}^{nsrc[irw]-1} exp{-lnr[irw][ifct][isrc]}

and the product

  W[irw]=prod_{ifct=0}^{nfct[irw]-1} w[irw][ifct]

A simple main program that reads and analyses the data files is included in
the directory ../devel/nompi/main.


BINARY FILE FORMAT

The log files are ASCII files that should be readable on any machine. The
data files, on the other hand, are written in binary format using the fwrite()
function. Integers are written as 4 byte signed integers and floating-point
numbers according to the IEEE-754 standard for double-precision numbers.

Binary data written to disk are converted to little endian byte order if the
machine is big endian. Field configurations and measurement data stored on
disk are thus always in little endian byte order independently of the machine
that is used.


RANDOM NUMBER GENERATOR

Random numbers are generated using the ranlux generator. There is an
independent instance of the generator per OpenMP thread.

The initialization of the generator is as follows:

- In the case of a new run, or if the option -norng is set, the program
  reads the parameters "level" and "seed" from the input file and uses
  these to initialize the generator.

- In a continuation run, and if the MPI process grid NPROC0x..xNPROC3 and
  the number of OpenMP threads is unchanged, the state of the generator
  is set to the one at the end of the previous run.

In a sequence of continuation runs, it is therefore recommended to leave
the process grid and the thread number unchanged and to make no use of the
option -norng.


SAFETY MEASURES AND ERROR REPORTING

A number of safety measures have been implemented:

- It is not possible to overwrite an existing log or data file; these
  must first be deleted or renamed by hand if a run is to be repeated.

- Appending a run to a previous measurement run is only possible if the run
  name and all relevant parameters match. Moreover, the new configuration
  sequence must extend the previous one with the same configuration spacing.

- The accessibility of the various directories and the compatibility
  of the chosen parameters is checked at the beginning of the program.

Any attempt to force illegal operations leads to an abnormal termination of
the program, with an informative message being written either to the log file
or the file STARTUP_ERROR in the program directory (if the error occurs before
the log file is opened).

It should be noted that filenames may not be longer than 127 characters. The
program checks at an early stage whether this is the case or not. Longer
filenames can be accommodated by setting the macro NAME_SIZE in the header
file global.h to a larger value.


CHECKPOINTS AND EARLY TERMINATION

The program can be stopped gracefully by touching a file in the log directory
with the same name as the log file but with extension .end instead of .log. It
may take a while until the program exits, because it will only do so when the
current field configuration is fully processed.

If the machine crashes, or if the program was stopped in the way described,
the run can always be continued starting from the saved output files. However,
after a crash, the log and data files may be corrupted, in which case they
must first be restored from the backup files.
