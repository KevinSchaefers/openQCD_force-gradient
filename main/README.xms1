
Main program xms1

SYNTAX

xms1 -i <filename> [[-noflds]|[-a]] [-nosm]


DESCRIPTION

This program reads gauge field configurations from disk and computes the
average Yang-Mills action density at selected gradient-flow times.


COMMAND-LINE OPTIONS

The program has only few options since most of the parameters are passed
through an input file. The options are

-i <filename>    Specifies the name of the input file. The name can be
                 a fully qualified name or be specified relative to the
                 working directory.

-noflds          Do not save the accumulated observable fields to disk.
                 If this option is set, continuation runs are excluded
                 and the only output are the log and data files.

-a               This option specifies that the run is a continuation of a
                 previous run. Except for the sample measurement data file,
                 which is overwritten at the end of the run, all output
                 data are appended to the previous log and data files.

-nosm            At the end of a run, the program normally performs a sample
                 measurement using the accumulated observable fields. This
                 step is omitted if this option is set.


INPUT PARAMETERS

The lattice size and the process grid must be defined in the file global.h
(see README.global). All other parameters are read from the input file. An
example of a valid input file is xms1.in in this directory. The parameter
values specified in this file are:

[Run name]
name         Snoopy137             # Run name = configuration base name.

[Log and data directories]
log_dir      ../data/xms1/log      # Log file directory.
dat_dir      ../data/xms1/dat      # Data file directory.

[Configurations]
type         e                     # Configuration storage type (e=exported,
                                   # b=block-exported, l=local).
cnfg_dir     /data/ym1/cnfg        # Configuration directory (type e).
block_dir    /data/ym1/blk         # Configuration directory (type b).
local_dir    /data/ym1/loc         # Configuration directory (type l).
nio_nodes    8                     # Number of top level subdirectories used
                                   # for block-exported or local storage.
nio_streams  4                     # Number of parallel I/O streams (block-
                                   # exported or local storage).
first        1                     # No of the first configuration to consider.
last         4                     # No of the last configuration.
step         1                     # Configuration separation (last-first must
                                   # be an integer multiple of step).

[Observable fields]
type         b                     # Observable fields storage type (e=exported,
                                   # b=block-exported, l=local).
cnfg_dir     /data/xms1/cnfg       # Configuration directory (type e).
block_dir    /data/xms1/blk        # Configuration directory (type b).
local_dir    /data/xms1/loc        # Configuration directory (type l).
bs           16 8 8 24             # Block size to be used for block-exported
                                   # fields.
nio_nodes    4                     # Number of top level subdirectories used
                                   # for block-exported or local storage.
nio_streams  4                     # Number of parallel I/O streams (block-
                                   # exported or local storage).

[Wilson flow]
integrator   RK3                   # EULER: Euler, RK2: 2nd order Runge-Kutta
                                   # RK3: 3rd order Runge-Kutta.
eps          2.0e-2                # Integration time step size.
tm           2.75 2.78 2.81        # Flow times at which measurements are
                                   # performed.
[Observables]
i3d          0                     # Distances are measured in 4d (i3d=0)
                                   # or 3d (i3d=1).
dmax         16                    # Maximal integration radius used when
                                   # calculating the error matrix.
Qmax         10.0                  # Only measurements where |Q|<=Qmax are
                                   # included in the sample average (Q =
				   # topological charge).

The chosen parameter values must satisfy the following constraints:

- In the case of the observable field storage of type "b", the block size
  bs must divide the lattice size and the local lattice must divide the block
  size. Moreover, nio_nodes and nio_streams must divide the number nb of
  blocks.

- In the case of storage of type "l", nio_nodes and nio_streams must divide
  the number NPROC of MPI processes.

- The same rules apply for the gauge-field configurations, where, however,
  the block size is read from the configuration file in the case of block-
  exported storage.

- Continuation runs (option -a) require all algorithmic parameters to be
  the same as in the previous run.

Superfluous parameters may be deleted or commented out. If present they are
not read by the program and the specified values (if any) have no effect on
the run.


CONFIGURATION DIRECTORY STRUCTURE

The configuration and observable-fields directory tree is expected to be
of the form described in README.ym1.


FILES

The program searches for the gauge field configurations

  <run name>n<int>

in the specified configuration directory (or its subdirectories in the case of
storage of type "b" and "l"), where <int> is the configuration number.

If the -noflds option is not set, the program saves the observable fields
to the files

  <run name>n<int>.fld

in the specified configuration directory. Depending on the storage type,
the fields are stored in subdirectories and the filenames are complemented
with extensions as in the case of the gauge fields.

The program writes the results of the computations to the files

  <run name>.xms1.log     Log file.
  <run name>.par          Parameter file.
  <run name>.xms1.0.dat   Configuration by configuration measurement data.
  <run name>.xms1.1.dat   Sample measurement data.

  <run name>.xms1.log~    Backup log file.
  <run name>.par~         Backup parameter file.
  <run name>.xms1.0.dat~  Backup data file.
  <run name>.xms1.1.dat~  Backup sample data file.

in the directories log_dir (log file) and dat_dir (parameter and data files).
The backup log and data files are updated each time a configuration is fully
processed. Sample measurements are performed at the end of the run unless the
option -nosm is set.


OUTPUT DATA

The program assumes periodic boundary conditions and is intended for the
analysis of configurations on very large lattices. In particular, all
statistical errors are estimated using translation averages.

For each configuration, the Wilson flow is integrated from flow time 0 to the
specified flow times in steps of eps using the specified integrator. Up to
flow time t=1, a finer step size equal to eps/10^p is used, where p=1,1/2,1/3
in the case of the EULER, RK2 and RK3 integrator, respectively.

At all times t_i, the translation average <E_i> of the Yang-Mills action
density is then computed as well as the variances

  var_{ij}(d)=(1/V)*sum_{|x|<=d}C_{ij}(x),

  C_{ij}(x)=<(E_i(x)E_j(0)>-<E_i><E_j>,

  i,j=0,..,ntm-1, d=0,1,..,dmax, V=no of lattice points,

where |x| denotes the distance from the origin in 3d or 4d depending on the
value of the parameter i3d (see tcharge/ftensor.c and tcharge/ym_action.c for
the definition of the Yang-Mills action density).

At the beginning of the measurement data file the program writes the data
contained in the header structure

static struct
{
   int ntm,dmax;
   double *tm;
} file_head;

where tm is an array of ntm elements containing the specified flow times.
After the header data, the data file contains a sequence of data structures

static struct
{
   int nc;
   double *Q;
   double *E,***var;
} data;

labeled by the configuration number nc. The contents of the arrays are

  Q[i]:                Value of the topological charge at flow time tm[i].

  E[i]:                Value of t^2*<E> at flow time tm[i].

  var[i][j][d]:        Variance of E[i],E[j] calculated by summing
                       the correlation matrix up to distance d.

  i,j=0,..,ntm-1, d=0,..,dmax.

See the functions write_file_head() and write_data() in the program file
xms1.c for the exact order in which the data are written to the output files.

The sample measurement data file contain the same header data followed by

  int nc;
  int *nacc;
  double *E,***var;

where nc is the total number of gauge-field configurations processed and
nacc[i], i=0,..,ntm-1, the number of configurations included in the sample
average at flow time tm[i], i.e. the number of processed configurations
satisfying |Q[i]|<=Qmax. The arrays E and var are as above, but computed
using the sample average observable fields.


CONTINUATION AND SAMPLE MEASUREMENT RUNS

In these runs the option -noflds may not be set. The accumulated observable
fields are then written to disk every time a configuration is fully processed
and the previous observable fields are deleted before the program proceeds to
the next configuration. In such a continuation run, the program determines the
number of the last configuration processed from the log file.

Sample measurements need not be performed in the course of a continuation run.
One is thus free to set the option -nosm or not. In the case of a crash or
early termination, continuation runs can be restarted from the last saved
observable fields and measurement data files.

A special case are pure sample measurement runs, where the program finds that
(according to the log file) the specified range of configurations has already
been processed and then merely performs the sample measurements.


BINARY FILE FORMAT

The log files are ASCII files that should be readable on any machine. The
data files, on the other hand, are written in binary format using the fwrite()
function. Integers are written as 4 byte signed integers and floating-point
numbers according to the IEEE-754 standard for double-precision numbers.

Binary data written to disk are converted to little endian byte order if the
machine is big endian. Field configurations and measurement data stored on
disk are thus always in little endian byte order independently of the machine
that is used.


SAFETY MEASURES AND ERROR REPORTING

A number of safety measures have been implemented:

- It is not possible to overwrite an existing log or data file; these
  must first be deleted or renamed by hand if a run is to be repeated.

- The accessibility of the various directories and the compatibility
  of the chosen parameters is checked at the beginning of the program.

Any attempt to force illegal operations leads to an abnormal termination of
the program, with an informative message being written either to the log file
or the file STARTUP_ERROR in the program directory (if the error occurs before
the log file is opened).

It should be noted that filenames may not be longer than 127 characters. The
program checks at an early stage whether this is the case or not. Longer
filenames can be accommodated by setting the macro NAME_SIZE in the header
file global.h to a larger value.


EARLY TERMINATION

The program can be stopped gracefully by touching a file in the log directory
with the same name as the log file but with extension .end instead of .log. It
may take a while until the program exits, because it will only do so when the
current field configuration is fully processed.
